OIL_VERSION = "2.5" : "test";

IMPLEMENTATION trampoline {
  TASK {
    UINT32 STACKSIZE = 32768;
    UINT32 PRIORITY = 1;
  };
  ISR {
    UINT32 STACKSIZE = 32768;
  };
};

CPU test {
  OS config {
    STATUS = STANDARD;
    ERRORHOOK = FALSE;
    PRETASKHOOK = FALSE;
    STARTUPHOOK = FALSE;
    SHUTDOWNHOOK = FALSE;
  };

  APPMODE std {};

  TASK ping {
    PRIORITY = 1;              // Numbers impose relative priority. Absolute value does not matter. (Larger numbers mean higher (sic!) priority.)
    AUTOSTART = TRUE{};        // Start after system start up.
    ACTIVATION = 1;            // Limits the number of instances if a task gets activated more than once.
    SCHEDULE = FULL;           // Make task fully preemtible.
    EVENT = pong_deployed;     // Event, task can wait for.
    RESOURCE = cubbyHoleMutex; // Ressource, task can aquire.
                               // Use multiple "EVENT = ..." or "RESOURCE = ..." lines if you want to use more than just one.
  };

  TASK pong {
    PRIORITY = 2;
    AUTOSTART = TRUE{};
    ACTIVATION = 1;
    SCHEDULE = FULL;
    EVENT = ping_deployed;
    RESOURCE = cubbyHoleMutex;
  };
  
  TASK shutdown {
    PRIORITY = 3;              // Has higher priority than ping and pong. If it didn't, program would never terminate due to starvation.
    AUTOSTART = FALSE;         // Gets activated through ALARM, see below.
    ACTIVATION = 1;
    SCHEDULE = FULL;           // Make fully preemtible.
  };


  //default tick is 50 ms
  COUNTER counter100ms {
    TICKSPERBASE = 2;          // Freqeuncy prescaler. Counter increases by one every 100ms.
    MAXALLOWEDVALUE = 255;
    MINCYCLE = 1;              // Limits minimal cycle length of all attached alarms. Protects from too frequent alarms.
  };
  
  ALARM StartPingPong{         // Start ping-pong avalanche by unblocking ping thru a pong_deployed event.
    COUNTER = counter100ms;
    ACTION = SETEVENT {
      TASK = ping;
      EVENT = pong_deployed;
    };
    AUTOSTART = TRUE { 
      ALARMTIME = 10;          // Do this 1 second after system start.
      APPMODE = std;
    };
  };

  ALARM ShutdownTask{          // Shutdown task has higer priority than ping-pong, so it can prevail over ping-pong.
    COUNTER = counter100ms;
    ACTION = ACTIVATETASK {
      TASK = shutdown;
    };
    AUTOSTART = TRUE { 
      ALARMTIME = 100;         // After 10 seconds trigger system shutdown.
      APPMODE = std;
    };
  };

  EVENT ping_deployed {MASK=AUTO;}; // Define events.
  EVENT pong_deployed {MASK=AUTO;}; 
  RESOURCE cubbyHoleMutex { RESOURCEPROPERTY = STANDARD; }; // Define resources.
};